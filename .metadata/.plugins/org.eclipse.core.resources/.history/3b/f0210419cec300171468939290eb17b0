import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JList;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;

public class Simulador extends JFrame {
	
	
	private JList<String> list;
	private JComboBox<String> CBUbicaciones;
	private JPanel contentPane;
	private DefaultComboBoxModel<String> ubicaciones,ids;
	ConexionMySQL conMySQL;
	Connection conexion;



	/**
	 * Create the frame.
	 */
	public Simulador(String usuario, String contraseña) {
		
	     ConexionMySQL c = new ConexionMySQL ();
	     if (c.Conectar(usuario,contraseña)== null){
	    	 System.out.println("error no se pudo conectar");
	     }
	    conexion= c.getConnection();
	    ubicaciones = obtenerUbicaciones();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 450, 339);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JList list_2 = new JList();
		list_2.setBounds(313, 68, 111, 173);
		contentPane.add(list_2);
		
		JButton btnConectar = new JButton("Conectar");
		btnConectar.setBounds(179, 266, 89, 23);
		contentPane.add(btnConectar);
		
		JLabel lblNewLabel = new JLabel("Ubicaciones");
		lblNewLabel.setBounds(49, 24, 89, 14);
		contentPane.add(lblNewLabel);	

		
		JList list = new JList();
		list.setBounds(179, 68, 111, 173);
		contentPane.add(list);
		
		JLabel lblParquimetros = new JLabel("Parquimetros");
		lblParquimetros.setBounds(201, 24, 73, 14);
		contentPane.add(lblParquimetros);
		
		JLabel lblTarjetas = new JLabel("Tarjetas");
		lblTarjetas.setBounds(343, 24, 57, 14);
		contentPane.add(lblTarjetas);
		this.setVisible(true);
		
		CBUbicaciones = new JComboBox<String>(ubicaciones);
		CBUbicaciones.setToolTipText("Ubicacion");
		CBUbicaciones.setBounds(0, 0, 184, 20);
		CBUbicaciones.setVisible(true);
		CBUbicaciones.addActionListener (new ActionListener () {
			public void actionPerformed(ActionEvent e) {					
				
			}
		});
	}
	
	
	private DefaultComboBoxModel<String> obtenerUbicaciones() {
		DefaultComboBoxModel<String> toRet = new DefaultComboBoxModel<String>();

		try
		{

			// Se crea una sentencia jdbc para realizar la consulta
			java.sql.Statement stmt = conexion.createStatement();

			// Se prepara el string SQL de la consulta
			String sql = "SELECT DISTINCT calle FROM ubicaciones;"; 

			// Se ejecuta la sentencia y se recibe un resultado
			java.sql.ResultSet rs = stmt.executeQuery(sql);


			while(rs.next())
			{
				//toRet.addElement(rs.getString("calle")+" "+rs.getString("altura"));
				toRet.addElement(rs.getString("calle"));
				
			}

			
		}
		catch (java.sql.SQLException ex) {
			
			System.out.println(ex.getMessage());
		}




		return toRet;
	}
	
	private DefaultComboBoxModel<String> obtenerNroParquimetros(String calle,String altura) {
		DefaultComboBoxModel<String> toRet = new DefaultComboBoxModel<String>();

		try
		{

			// Se crea una sentencia jdbc para realizar la consulta
			java.sql.Statement stmt = conexion.createStatement();

			// Se prepara el string SQL de la consulta
			String sql = "SELECT id_parq FROM parquimetros WHERE calle = '" + calle + "' and altura ='"+altura+"'';"; 

			// Se ejecuta la sentencia y se recibe un resultado
			java.sql.ResultSet rs = stmt.executeQuery(sql);


			while(rs.next())
			{
				toRet.addElement(rs.getString("id_parq"));
				
				
			}


		}
		catch (java.sql.SQLException ex) {}




		return toRet;
	}
}
