import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JList;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

public class Simulador extends JFrame {
	
	
	private JList<String> list;
	private JComboBox<String> CBUbicaciones,CBTarjetas,CBParquimetros;
	private JPanel contentPane;
	private DefaultComboBoxModel<String> ubicaciones,parquimetros,tarjetas;
	ConexionMySQL conMySQL;
	Connection conexion;



	/**
	 * Create the frame.
	 */
	public Simulador(String usuario, String contraseña) {
		
	     ConexionMySQL c = new ConexionMySQL ();
	     if (c.Conectar(usuario,contraseña)== null){
	    	 System.out.println("error no se pudo conectar");
	     }
	    conexion= c.getConnection();


		ubicaciones = obtenerUbicaciones();
	    parquimetros  = new DefaultComboBoxModel<>();

	    tarjetas = obtenerTarjetas();
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 513, 339);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JButton btnConectar = new JButton("Conectar");
		btnConectar.setBounds(195, 152, 89, 23);
		contentPane.add(btnConectar);
		this.setVisible(true);
		
		JPanel panel = new JPanel();
		panel.setBounds(343, 24, 144, 117);
		contentPane.add(panel);
		panel.setLayout(null);
		
		
		JLabel lblParquimetros = new JLabel("Parquimetros");
		lblParquimetros.setBounds(32, 11, 85, 14);
		panel.add(lblParquimetros);
		

		
		JPanel panel_1 = new JPanel();
		panel_1.setBounds(165, 25, 155, 116);
		contentPane.add(panel_1);
		panel_1.setLayout(null);
		
	
		
		JPanel panel_2 = new JPanel();
		panel_2.setBounds(10, 24, 144, 117);
		contentPane.add(panel_2);
		panel_2.setLayout(null);
		
		JLabel lblTarjetas = new JLabel("Tarjetas");
		lblTarjetas.setBounds(47, 11, 57, 14);
		panel_2.add(lblTarjetas);
		
		JLabel lblSeleccioneUnaTarjetas = new JLabel("Seleccione una tarjeta");
		lblSeleccioneUnaTarjetas.setBounds(10, 36, 128, 14);
		panel_2.add(lblSeleccioneUnaTarjetas);
		
		CBTarjetas  = new JComboBox<String>(tarjetas);
		CBTarjetas.setBounds(20, 68, 112, 21);
		panel_2.add(CBTarjetas);
		
		JLabel lblNewLabel = new JLabel("Ubicaciones");
		lblNewLabel.setBounds(45, 11, 69, 14);
		panel_1.add(lblNewLabel);
		
		JLabel lblSeleccioneUnaCalle = new JLabel("Seleccione una ubicación");
		lblSeleccioneUnaCalle.setBounds(0, 30, 155, 14);
		panel_1.add(lblSeleccioneUnaCalle);
		
		CBUbicaciones = new JComboBox<String>(ubicaciones);
		CBUbicaciones.setBounds(10, 66, 128, 20);
		panel_1.add(CBUbicaciones);
		CBUbicaciones.setToolTipText("Ubicación");

		
				
				

				actualizarParquimetros(CBUbicaciones.getSelectedItem().toString());
				CBUbicaciones.addActionListener (new ActionListener () {
				public void actionPerformed(ActionEvent e) {					
					
					actualizarParquimetros(CBUbicaciones.getSelectedItem().toString());
					
					
				}
				});				
				
				JLabel lblSeleccioneUnParquimetro = new JLabel("Seleccione un parquimetro");
				lblSeleccioneUnParquimetro.setBounds(10, 36, 126, 14);
				panel.add(lblSeleccioneUnParquimetro);				
				
;
				CBParquimetros = new JComboBox<String>(parquimetros);
				CBParquimetros.setToolTipText("Parquimetro");
				CBParquimetros.setBounds(20, 66, 112, 21);
				panel.add(CBParquimetros);
				
				
	}
	
	
	
	
	private DefaultComboBoxModel<String> obtenerUbicaciones() {
		DefaultComboBoxModel<String> toRet = new DefaultComboBoxModel<String>();

		try
		{

			// Se crea una sentencia jdbc para realizar la consulta
			java.sql.Statement stmt = conexion.createStatement();

			// Se prepara el string SQL de la consulta
			String sql = "SELECT DISTINCT calle, altura FROM ubicaciones;"; 

			// Se ejecuta la sentencia y se recibe un resultado
			java.sql.ResultSet rs = stmt.executeQuery(sql);


			while(rs.next())
			{
				toRet.addElement(rs.getString("calle")+" "+rs.getString("altura"));
				
				
			}

			
		}
		catch (java.sql.SQLException ex) {}




		return toRet;
	}
	
	
	

	
	protected void actualizarParquimetros(String u) {
		String[] uc = u.split(" ", 2);
		parquimetros.removeAllElements();
		try
		{

			// Se crea una sentencia jdbc para realizar la consulta
			java.sql.Statement stmt = conexion.createStatement();

			// Se prepara el string SQL de la consulta
			String sql = "SELECT id_parq FROM ubicaciones natural join parquimetros WHERE  calle = '" + uc[0] +"' and altura = '" + uc[1]+ "';"; 
			// Se ejecuta la sentencia y se recibe un resultado
			java.sql.ResultSet rs = stmt.executeQuery(sql);


			while(rs.next())
			{
				parquimetros.addElement(rs.getString("id_parq"));
				
			}


		}
		catch (java.sql.SQLException ex) {}



	}
	
	private DefaultComboBoxModel<String> obtenerTarjetas() {
		DefaultComboBoxModel<String> toRet = new DefaultComboBoxModel<String>();

		try
		{

			// Se crea una sentencia jdbc para realizar la consulta
			java.sql.Statement stmt = conexion.createStatement();

			// Se prepara el string SQL de la consulta
			String sql = "SELECT id_tarjeta FROM tarjetas;"; 

			// Se ejecuta la sentencia y se recibe un resultado
			java.sql.ResultSet rs = stmt.executeQuery(sql);


			while(rs.next())
			{
				toRet.addElement(rs.getString("id_tarjeta"));
				
				
			}


		}
		catch (java.sql.SQLException ex) {
			System.out.println(ex.getMessage());
		}




		return toRet;
	}
}
